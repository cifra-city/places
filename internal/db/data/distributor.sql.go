// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: distributor.sql

package data

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addMember = `-- name: AddMember :one
UPDATE distributor
SET member = array_append(member, $2)
WHERE id = $1
    RETURNING id, name, member, owner
`

type AddMemberParams struct {
	ID          uuid.UUID
	ArrayAppend interface{}
}

func (q *Queries) AddMember(ctx context.Context, arg AddMemberParams) (Distributor, error) {
	row := q.db.QueryRowContext(ctx, addMember, arg.ID, arg.ArrayAppend)
	var i Distributor
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Member),
		&i.Owner,
	)
	return i, err
}

const createDistributor = `-- name: CreateDistributor :one
INSERT INTO distributor (id, name, member, owner)
VALUES ($1, $2, $3, $4)
    RETURNING id, name, member, owner
`

type CreateDistributorParams struct {
	ID     uuid.UUID
	Name   string
	Member []uuid.UUID
	Owner  uuid.UUID
}

func (q *Queries) CreateDistributor(ctx context.Context, arg CreateDistributorParams) (Distributor, error) {
	row := q.db.QueryRowContext(ctx, createDistributor,
		arg.ID,
		arg.Name,
		pq.Array(arg.Member),
		arg.Owner,
	)
	var i Distributor
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Member),
		&i.Owner,
	)
	return i, err
}

const getDistributorByID = `-- name: GetDistributorByID :one
SELECT id, name, member, owner FROM distributor
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDistributorByID(ctx context.Context, id uuid.UUID) (Distributor, error) {
	row := q.db.QueryRowContext(ctx, getDistributorByID, id)
	var i Distributor
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Member),
		&i.Owner,
	)
	return i, err
}
