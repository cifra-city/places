// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: places.sql

package data

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const filterByGradeAbove = `-- name: FilterByGradeAbove :many
SELECT id, distributor, username, name, title, description, address, grade, reviews_num, tags FROM places
WHERE grade > $1
`

func (q *Queries) FilterByGradeAbove(ctx context.Context, grade sql.NullFloat64) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, filterByGradeAbove, grade)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Distributor,
			&i.Username,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Address,
			&i.Grade,
			&i.ReviewsNum,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterByGradeBelow = `-- name: FilterByGradeBelow :many
SELECT id, distributor, username, name, title, description, address, grade, reviews_num, tags FROM places
WHERE grade < $1
`

func (q *Queries) FilterByGradeBelow(ctx context.Context, grade sql.NullFloat64) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, filterByGradeBelow, grade)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Distributor,
			&i.Username,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Address,
			&i.Grade,
			&i.ReviewsNum,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterByReviewsNum = `-- name: FilterByReviewsNum :many
SELECT id, distributor, username, name, title, description, address, grade, reviews_num, tags FROM places
WHERE reviews_num > $1
`

func (q *Queries) FilterByReviewsNum(ctx context.Context, reviewsNum int32) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, filterByReviewsNum, reviewsNum)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Distributor,
			&i.Username,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Address,
			&i.Grade,
			&i.ReviewsNum,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterByTags = `-- name: FilterByTags :many
SELECT id, distributor, username, name, title, description, address, grade, reviews_num, tags FROM places
WHERE tags @> $1
`

func (q *Queries) FilterByTags(ctx context.Context, tags string) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, filterByTags, tags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Distributor,
			&i.Username,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Address,
			&i.Grade,
			&i.ReviewsNum,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaceByID = `-- name: GetPlaceByID :one
SELECT id, distributor, username, name, title, description, address, grade, reviews_num, tags FROM places
WHERE id = $1
`

func (q *Queries) GetPlaceByID(ctx context.Context, id uuid.UUID) (Place, error) {
	row := q.db.QueryRowContext(ctx, getPlaceByID, id)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Distributor,
		&i.Username,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Address,
		&i.Grade,
		&i.ReviewsNum,
		&i.Tags,
	)
	return i, err
}

const getPlaceByUsername = `-- name: GetPlaceByUsername :one
SELECT id, distributor, username, name, title, description, address, grade, reviews_num, tags FROM places
WHERE username = $1
`

func (q *Queries) GetPlaceByUsername(ctx context.Context, username string) (Place, error) {
	row := q.db.QueryRowContext(ctx, getPlaceByUsername, username)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Distributor,
		&i.Username,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Address,
		&i.Grade,
		&i.ReviewsNum,
		&i.Tags,
	)
	return i, err
}

const insertPlace = `-- name: InsertPlace :one
INSERT INTO places (id, distributor, username, name, title, description, address, grade, reviews_num, tags)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
    RETURNING id, distributor, username, name, title, description, address, grade, reviews_num, tags
`

type InsertPlaceParams struct {
	ID          uuid.UUID
	Distributor int64
	Username    string
	Name        string
	Title       string
	Description string
	Address     string
	Grade       sql.NullFloat64
	ReviewsNum  int32
	Tags        string
}

func (q *Queries) InsertPlace(ctx context.Context, arg InsertPlaceParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, insertPlace,
		arg.ID,
		arg.Distributor,
		arg.Username,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.Address,
		arg.Grade,
		arg.ReviewsNum,
		arg.Tags,
	)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Distributor,
		&i.Username,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Address,
		&i.Grade,
		&i.ReviewsNum,
		&i.Tags,
	)
	return i, err
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE places
SET address = $2
WHERE id = $1
    RETURNING id, distributor, username, name, title, description, address, grade, reviews_num, tags
`

type UpdateAddressParams struct {
	ID      uuid.UUID
	Address string
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updateAddress, arg.ID, arg.Address)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Distributor,
		&i.Username,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Address,
		&i.Grade,
		&i.ReviewsNum,
		&i.Tags,
	)
	return i, err
}

const updateDescription = `-- name: UpdateDescription :one
UPDATE places
SET description = $2
WHERE id = $1
    RETURNING id, distributor, username, name, title, description, address, grade, reviews_num, tags
`

type UpdateDescriptionParams struct {
	ID          uuid.UUID
	Description string
}

func (q *Queries) UpdateDescription(ctx context.Context, arg UpdateDescriptionParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updateDescription, arg.ID, arg.Description)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Distributor,
		&i.Username,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Address,
		&i.Grade,
		&i.ReviewsNum,
		&i.Tags,
	)
	return i, err
}

const updateGrade = `-- name: UpdateGrade :one
UPDATE places
SET grade = $2
WHERE id = $1
    RETURNING id, distributor, username, name, title, description, address, grade, reviews_num, tags
`

type UpdateGradeParams struct {
	ID    uuid.UUID
	Grade sql.NullFloat64
}

func (q *Queries) UpdateGrade(ctx context.Context, arg UpdateGradeParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updateGrade, arg.ID, arg.Grade)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Distributor,
		&i.Username,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Address,
		&i.Grade,
		&i.ReviewsNum,
		&i.Tags,
	)
	return i, err
}

const updateReviewsNum = `-- name: UpdateReviewsNum :one
UPDATE places
SET reviews_num = $2
WHERE id = $1
    RETURNING id, distributor, username, name, title, description, address, grade, reviews_num, tags
`

type UpdateReviewsNumParams struct {
	ID         uuid.UUID
	ReviewsNum int32
}

func (q *Queries) UpdateReviewsNum(ctx context.Context, arg UpdateReviewsNumParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updateReviewsNum, arg.ID, arg.ReviewsNum)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Distributor,
		&i.Username,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Address,
		&i.Grade,
		&i.ReviewsNum,
		&i.Tags,
	)
	return i, err
}

const updateTags = `-- name: UpdateTags :one
UPDATE places
SET tags = $2
WHERE id = $1
    RETURNING id, distributor, username, name, title, description, address, grade, reviews_num, tags
`

type UpdateTagsParams struct {
	ID   uuid.UUID
	Tags string
}

func (q *Queries) UpdateTags(ctx context.Context, arg UpdateTagsParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updateTags, arg.ID, arg.Tags)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Distributor,
		&i.Username,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Address,
		&i.Grade,
		&i.ReviewsNum,
		&i.Tags,
	)
	return i, err
}

const updateTitle = `-- name: UpdateTitle :one
UPDATE places
SET title = $2
WHERE id = $1
    RETURNING id, distributor, username, name, title, description, address, grade, reviews_num, tags
`

type UpdateTitleParams struct {
	ID    uuid.UUID
	Title string
}

func (q *Queries) UpdateTitle(ctx context.Context, arg UpdateTitleParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updateTitle, arg.ID, arg.Title)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Distributor,
		&i.Username,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Address,
		&i.Grade,
		&i.ReviewsNum,
		&i.Tags,
	)
	return i, err
}
